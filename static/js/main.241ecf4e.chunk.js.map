{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","dueño","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","onChange","type","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uPAiIeA,EA5HI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAGDC,mBAAS,CACpCC,QAAS,GACTC,WAAO,GACPC,MAAO,GACPC,KAAM,GACNC,SAAU,KARkB,mBAGzBC,EAHyB,KAGnBC,EAHmB,OAYCP,oBAAS,GAZV,mBAYzBQ,EAZyB,KAYlBC,EAZkB,KAgB1BC,EAAkB,SAACC,GACrBJ,EAAe,2BACRD,GADO,kBAETK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAK1Bb,EAA0CK,EAA1CL,QAASC,EAAiCI,EAAjCJ,WAAOC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SA+BrC,OACI,kBAAC,WAAD,KACI,0CAEEG,EAAQ,uBAAGO,UAAU,gBAAb,qCAAmE,KAE7E,0BAAMC,SAnCK,SAACL,GAEhBA,EAAEM,iBAGkB,KAAjBhB,EAAQiB,QAA8B,KAAfhB,EAAMgB,QAA+B,KAAff,EAAMe,QAA8B,KAAdd,EAAKc,QAAkC,KAAlBb,EAASa,QAKpGT,GAAgB,GAGhBH,EAAKa,GAAIC,MAGTrB,EAAUO,GAGVC,EAAe,CACXN,QAAS,GACTC,WAAO,GACPC,MAAO,GACPC,KAAM,GACNC,SAAU,MAlBVI,GAAgB,KA8BZ,iDACA,2BACII,KAAK,UACLQ,SAAUX,EACVK,UAAU,eACVO,KAAK,OACLR,MAAOb,IAGX,kDACA,2BACIY,KAAK,WACLQ,SAAUX,EACVK,UAAU,eACVO,KAAK,OACLR,MAAOZ,IAGX,wCACA,2BACIW,KAAK,QACLQ,SAAUX,EACVK,UAAU,eACVO,KAAK,OACLR,MAAOX,IAGX,uCACA,2BACIU,KAAK,OACLQ,SAAUX,EACVK,UAAU,eACVO,KAAK,OACLR,MAAOV,IAGX,8CACA,8BACIW,UAAU,eACVF,KAAK,WACLQ,SAAUX,EACVI,MAAOT,IAGX,4BACIiB,KAAK,SACLP,UAAU,+BAFd,mBCtFDQ,EAtBF,SAAC,GAA0B,IAAzBjB,EAAwB,EAAxBA,KAAMkB,EAAkB,EAAlBA,aAEjB,OACI,yBAAKT,UAAU,QACX,yCAAc,8BAAOT,EAAKL,SAA1B,KACA,6CAAkB,8BAAOK,EAAKJ,YAA9B,KACA,uCAAY,8BAAOI,EAAKH,OAAxB,KACA,sCAAW,8BAAOG,EAAKF,MAAvB,KACA,6CAAe,8BAAOE,EAAKD,UAA3B,KACA,4BACIU,UAAU,+BACVU,QAAS,kBAAMD,EAAalB,EAAKa,MAFrC,mBC0DGO,MAlEf,WAGE,IAAIC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,UAEhDJ,IACFA,EAAiB,IANN,MAUiB3B,mBAAS2B,GAV1B,mBAUNK,EAVM,KAUCC,EAVD,KAabC,qBAAW,WACYN,KAAKC,MAAMC,aAAaC,QAAQ,UAGnDD,aAAaK,QAAS,QAASP,KAAKQ,UAAUJ,IAE9CF,aAAaK,QAAS,QAASP,KAAKQ,UAAU,OAE/C,CAACJ,IAGJ,IAQMR,EAAe,SAACL,GACpB,IAAMkB,EAAcL,EAAMM,QAAQ,SAAChC,GAAD,OAAUA,EAAKa,KAAOA,KACxDc,EAAcI,IAIVE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBAErD,OACE,kBAAC,WAAD,KACE,0DACA,yBAAKzB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEhB,UAvBM,SAACO,GACjB2B,EAAY,sBACPD,GADO,CAEV1B,SAuBI,yBAAKS,UAAU,mBACb,4BAAKwB,GACJP,EAAMS,KAAM,SAAAnC,GAAI,OACjB,kBAAC,EAAD,CACEoC,IAAKpC,EAAKa,GACVb,KAAMA,EACNkB,aAAcA,YChDRmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLoD,QAAQpD,MAAMA,EAAMqD,c","file":"static/js/main.241ecf4e.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    //crear state de citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: \"\",\r\n        dueño: \"\",\r\n        fecha: \"\",\r\n        hora: \"\",\r\n        sintomas: \"\",\r\n    });\r\n\r\n    //se setea el error si el form esta incompleto\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    \r\n    //actualiza el estado cuando cambia el input\r\n    const actualizarState = (e) => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n    \r\n    //extraer valores\r\n    const { mascota, dueño, fecha, hora, sintomas } = cita;\r\n\r\n    const submitCita = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        //validar campos\r\n        if(mascota.trim()===\"\" || dueño.trim()===\"\"  || fecha.trim()===\"\"  || hora.trim()===\"\"  || sintomas.trim()===\"\" ){\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n        //eliminar el mensaje previo\r\n        actualizarError(false);\r\n\r\n        //asignar un ID\r\n        cita.id= uuid();\r\n\r\n        //funcion llega por props\r\n        crearCita(cita);\r\n\r\n        //reiniciar el form\r\n        actualizarCita({\r\n            mascota: \"\",\r\n            dueño: \"\",\r\n            fecha: \"\",\r\n            hora: \"\",\r\n            sintomas: \"\", \r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear cita</h2>\r\n\r\n            { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p>: null}\r\n\r\n            <form onSubmit={submitCita}>\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    name=\"mascota\"\r\n                    onChange={actualizarState}\r\n                    className=\"u-full-width\"\r\n                    type=\"text\"\r\n                    value={mascota}\r\n                />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                    name=\"dueño\"\r\n                    onChange={actualizarState}\r\n                    className=\"u-full-width\"\r\n                    type=\"text\"\r\n                    value={dueño}\r\n                />\r\n                    \r\n                <label>Fecha</label>\r\n                <input\r\n                    name=\"fecha\"\r\n                    onChange={actualizarState}\r\n                    className=\"u-full-width\"\r\n                    type=\"date\"\r\n                    value={fecha}\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input\r\n                    name=\"hora\"\r\n                    onChange={actualizarState}\r\n                    className=\"u-full-width\"\r\n                    type=\"time\"\r\n                    value={hora}\r\n                />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas} \r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar cita\r\n                </button>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Formulario;","import React, { Fragment, useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n\r\n    return (\r\n        <div className=\"cita\">\r\n            <p> Mascota : <span>{cita.mascota}</span> </p>\r\n            <p> Propietario : <span>{cita.dueño}</span> </p>\r\n            <p> Fecha : <span>{cita.fecha}</span> </p>\r\n            <p> Hora : <span>{cita.hora}</span> </p>\r\n            <p> Síntomas : <span>{cita.sintomas}</span> </p>\r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                onClick={() => eliminarCita(cita.id)}\r\n            >Eliminar &times;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCita.propTypes = {\r\n    cita : PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Cita;","import React, { Fragment, useEffect, useState } from 'react';\nimport Formulario from \"../src/components/Formulario\"\nimport Cita from \"../src/components/Cita\"\n\nfunction App() {\n\n  //Citas en Local Storage\n  let citasIniciales= JSON.parse(localStorage.getItem(\"citas\"));\n\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  //Arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // UseEffect para realizar ciertas operaciones cuando el state citas cambia\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n    if (citasIniciales) {\n      localStorage.setItem (\"citas\", JSON.stringify(citas) )\n    } else {\n      localStorage.setItem (\"citas\", JSON.stringify([]))\n    }\n  }, [citas]);\n\n  //función que tome las citas existentes y agregue la nueva\n  const crearCita = (cita) => {\n    guardarCitas ([\n      ...citas,\n      cita\n    ]);\n  };\n\n   // Función que elimina una cita por su id\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter ((cita) => cita.id !== id);\n    guardarCitas (nuevasCitas);\n  };\n\n  // Mensaje condicional\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administra tus citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map ( cita => (\n            <Cita\n              key={cita.id}\n              cita={cita}\n              eliminarCita={eliminarCita}\n            />\n            ))}\n          </div>\n        </div>\n      </div>\n      </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}